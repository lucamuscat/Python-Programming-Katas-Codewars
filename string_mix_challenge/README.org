#+Title: String Mix
[[https://www.codewars.com/kata/strings-mix/discuss/python][Link to challenge]]

* Instructions
Given two strings s1 and s2, we want to visualize how different the two strings are. We will only take into account the lowercase letters (a to z). First let us count the frequency of each lowercase letters in s1 and s2.

=s1 = "A aaaa bb c"=

=s2 = "& aaa bbb c d"=

=s1 has 4 'a', 2 'b', 1 'c'=

=s2 has 3 'a', 3 'b', 1 'c', 1 'd'=

So the maximum for 'a' in s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2. In the following we will not consider letters when the maximum of their occurrences is less than or equal to 1.

We can resume the differences between s1 and s2 in the following string: "1:aaaa/2:bbb" where 1 in 1:aaaa stands for string s1 and aaaa because the maximum for a is 4. In the same manner 2:bbb stands for string s2 and bbb because the maximum for b is 3.

The task is to produce a string in which each lowercase letters of s1 or s2 appears as many times as its maximum if this maximum is strictly greater than 1; these letters will be prefixed by the number of the string where they appear with their maximum value and :. If the maximum is in s1 as well as in s2 the prefix is =:.

In the result, substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix) will be in decreasing order of their length and when they have the same length sorted in ascending lexicographic order (letters and digits - more precisely sorted by codepoint); the different groups will be separated by '/'. See examples and "Example Tests".

Hopefully other examples can make this clearer.
#+BEGIN_SRC 
s1 = "my&friend&Paul has heavy hats! &"
s2 = "my friend John has many many friends &"
mix(s1, s2) --> "2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"

s1 = "mmmmm m nnnnn y&friend&Paul has heavy hats! &"
s2 = "my frie n d Joh n has ma n y ma n y frie n ds n&"
mix(s1, s2) --> "1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"

s1="Are the kids at home? aaaaa fffff"
s2="Yes they are here! aaaaa fffff"
mix(s1, s2) --> "=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh"
#+END_SRC

Note for Swift, R, PowerShell
The prefix =: is replaced by E:

#+BEGIN_SRC 
s1 = "mmmmm m nnnnn y&friend&Paul has heavy hats! &"
s2 = "my frie n d Joh n has ma n y ma n y frie n ds n&"
mix(s1, s2) --> "1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss"
#+END_SRC

** Remarks
Reading through the write-up and what was expected in the answers, its clear that not all of the criterias needed to pass the test were listed. For instance, no where was it mentioned by word that the results must be sorted according to their group (ex 1:mmmm is always listed before =:mmmm, 1:<-2:<- =:)

I also submitted an issue regarding the fact that the random tests are most probably run on a version lower than 3.3.5. This program needs version 3.6 or higher to run (Codewars also gave the option to write the program in this version, so i dont see why it should be excluded).

The errors thrown are as follows:
#+BEGIN_SRC 
  STDERR:
  Traceback (most recent call last):
    File "main.py", line 75, in <module>
      randomTests()
    File "main.py", line 73, in randomTests
      Test.assert_equals(mix(s1, s2), mixSol(s1, s2))
    File "main.py", line 37, in mixSol
      sm = max([alpha_s1[i], alpha_s2[i]])
    File "/home/codewarrior/solution.py", line 26, in max
      s1_key_set = {k for k in s1_dict.keys()}
  AttributeError: 'list' object has no attribute 'keys'
#+END_SRC

Even more random errors were thrown after the code was changed around. I highly doubt that this error is coming from my code as the sample tests passed (I also noticed that they were conducted using the selected version ie. the sample tests were run in version 3.6 . This can be easily tested as when version 3.4 is selected the tests fail as a 3.6 feature which allows Dictionaries to preserve their insertion order was used).

